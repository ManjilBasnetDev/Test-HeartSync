/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package heartsync.view;

import java.awt.CardLayout;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Insets;
import java.awt.RenderingHints;
import java.awt.event.FocusAdapter;
import java.awt.event.FocusEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.geom.Ellipse2D;
import javax.swing.BorderFactory;
import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.border.Border;
import javax.swing.border.LineBorder;
import java.awt.*;
import javax.swing.*;
import javax.swing.border.*;
import javax.swing.table.*;
import java.sql.SQLException;
import heartsync.dao.UserDAO;

/**
 *
 * @author DELL
 */
public class AdminDelete extends javax.swing.JFrame {
    private CardLayout cardLayout;
    private JPanel cardPanel;
    private JLabel activeLabel = null;
    private final Color ACTIVE_COLOR = new java.awt.Color(255, 105, 180);
    private final Color INACTIVE_COLOR = new java.awt.Color(100, 100, 100);
    private JTable verifyTable;
    private JTable reportedTable;
    private DefaultTableModel verifyTableModel;
    private DefaultTableModel reportedTableModel;

    /**
     * Creates new form DeleteAdmin
     */
    public AdminDelete() {
        initComponents();
        setupUI();
        setLocationRelativeTo(null);  // Center the window
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 198, 209));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setText("Heart Sync");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel2.setText("Warning: Deleting yor account will permanently");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel3.setText("remove all your data and cannot be undone.");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel4.setText("Enter usename to confirm");

        jButton1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jButton1.setText("Delete User Account");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Segoe UI Black", 3, 12)); // NOI18N
        jLabel5.setText("We 'll send a confirmation email to verify this action. Check your inbox.");

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel6.setText("Verify user profiles");

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel7.setText("View Reported user");

        jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel8.setText("Delete Account");

        jLabel9.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel9.setText("Admin Profile");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(75, 75, 75)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel8))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jTextField1)
                            .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 254, Short.MAX_VALUE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(132, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel9)))
                .addGap(29, 29, 29))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7)
                    .addComponent(jLabel8))
                .addGap(22, 22, 22)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addGap(18, 18, 18)
                .addComponent(jLabel5)
                .addContainerGap(33, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>                        

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        String username = jTextField1.getText().trim();
        
        // Validate username
        if (username.isEmpty()) {
            JOptionPane.showMessageDialog(this,
                "Please enter a username",
                "Validation Error",
                JOptionPane.ERROR_MESSAGE);
            jTextField1.requestFocus();
            return;
        }
        
        if (username.length() < 3) {
            JOptionPane.showMessageDialog(this,
                "Username must be at least 3 characters long",
                "Validation Error",
                JOptionPane.ERROR_MESSAGE);
            jTextField1.requestFocus();
            return;
        }
        
        if (!username.matches("^[a-zA-Z0-9_]+$")) {
            JOptionPane.showMessageDialog(this,
                "Username can only contain letters, numbers, and underscores",
                "Validation Error",
                JOptionPane.ERROR_MESSAGE);
            jTextField1.requestFocus();
            return;
        }
        
        // Show confirmation dialog
        int choice = JOptionPane.showConfirmDialog(this,
            "Are you sure you want to delete the account for user: " + username + "?\nThis action cannot be undone.",
            "Confirm Delete",
            JOptionPane.YES_NO_OPTION,
            JOptionPane.WARNING_MESSAGE);
            
        if (choice == JOptionPane.YES_OPTION) {
            try {
                UserDAO userDAO = new UserDAO();
                boolean success = userDAO.deleteUser(username);
                
                if (success) {
                    JOptionPane.showMessageDialog(this,
                        "Account deleted successfully. A confirmation email has been sent.",
                        "Success",
                        JOptionPane.INFORMATION_MESSAGE);
                    jTextField1.setText("");
                } else {
                    JOptionPane.showMessageDialog(this,
                        "User not found. Please check the username and try again.",
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
                }
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this,
                    "Database error: " + e.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this,
                    "An error occurred: " + e.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            }
        }
    }                                        

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AdminDelete.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AdminDelete.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AdminDelete.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AdminDelete.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AdminDelete().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration                   

    private void setupUI() {
        // Set up the main container with BorderLayout
        Container contentPane = getContentPane();
        contentPane.setLayout(new BorderLayout(10, 10));

        // Create navigation panel
        JPanel navPanel = new JPanel(new FlowLayout(FlowLayout.LEFT, 20, 5));
        navPanel.setBackground(new Color(255, 198, 209));
        
        // Style and add navigation labels
        jLabel6.setText("Verify user profiles");
        jLabel7.setText("View Reported user");
        jLabel8.setText("Delete Account");
        
        jLabel6.setCursor(new Cursor(Cursor.HAND_CURSOR));
        jLabel7.setCursor(new Cursor(Cursor.HAND_CURSOR));
        jLabel8.setCursor(new Cursor(Cursor.HAND_CURSOR));
        
        navPanel.add(jLabel6);
        navPanel.add(jLabel7);
        navPanel.add(jLabel8);
        
        // Add click listeners
        jLabel6.addMouseListener(new NavigationClickListener("VERIFY", jLabel6));
        jLabel7.addMouseListener(new NavigationClickListener("RESPOND", jLabel7));
        jLabel8.addMouseListener(new NavigationClickListener("DELETE", jLabel8));

        // Set up card layout
        cardLayout = new CardLayout();
        cardPanel = new JPanel(cardLayout);
        
        // Create panels for each page
        JPanel verifyPanel = createVerifyPanel();
        JPanel respondPanel = createRespondPanel();
        
        // Add panels to card layout
        cardPanel.add(verifyPanel, "VERIFY");
        cardPanel.add(respondPanel, "RESPOND");
        cardPanel.add(jPanel1, "DELETE");  // Using existing delete panel
        
        // Add components to the frame
        contentPane.add(navPanel, BorderLayout.NORTH);
        contentPane.add(cardPanel, BorderLayout.CENTER);
        
        // Set initial active tab
        setActiveLabel(jLabel8);
        cardLayout.show(cardPanel, "DELETE");
        
        // Set frame properties
        setTitle("Heart Sync Admin");
        setSize(500, 400);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        
        // Style the delete account panel
        styleDeletePanel();
    }

    private void styleDeletePanel() {
        // Style the main panel
        jPanel1.setBackground(new Color(255, 228, 236)); // Lighter pink background
        jPanel1.setBorder(BorderFactory.createEmptyBorder(30, 30, 30, 30));
        
        // Style the title
        jLabel1.setFont(new Font("Segoe UI", Font.BOLD, 36));
        jLabel1.setForeground(new Color(44, 44, 84));
        
        // Style the warning panel
        jPanel2.setBackground(new Color(255, 255, 255));
        jPanel2.setBorder(BorderFactory.createCompoundBorder(
            BorderFactory.createLineBorder(new Color(255, 105, 180), 2, true),
            BorderFactory.createEmptyBorder(15, 15, 15, 15)
        ));
        
        // Style the warning labels
        jLabel2.setFont(new Font("Segoe UI", Font.BOLD, 16));
        jLabel3.setFont(new Font("Segoe UI", Font.BOLD, 16));
        jLabel2.setForeground(new Color(44, 44, 84));
        jLabel3.setForeground(new Color(44, 44, 84));
        
        // Style the username label and field
        jLabel4.setFont(new Font("Segoe UI", Font.BOLD, 16));
        jLabel4.setForeground(new Color(44, 44, 84));
        
        jTextField1.setFont(new Font("Segoe UI", Font.PLAIN, 16));
        jTextField1.setBorder(BorderFactory.createCompoundBorder(
            BorderFactory.createLineBorder(new Color(255, 105, 180), 2, true),
            BorderFactory.createEmptyBorder(8, 12, 8, 12)
        ));
        jTextField1.setBackground(Color.WHITE);
        jTextField1.setPreferredSize(new Dimension(300, 40));
        
        // Style the delete button
        jButton1.setFont(new Font("Segoe UI", Font.BOLD, 16));
        jButton1.setBackground(new Color(255, 99, 99));
        jButton1.setForeground(Color.WHITE);
        jButton1.setBorderPainted(false);
        jButton1.setFocusPainted(false);
        jButton1.setCursor(new Cursor(Cursor.HAND_CURSOR));
        jButton1.setBorder(BorderFactory.createEmptyBorder(12, 25, 12, 25));
        jButton1.setPreferredSize(new Dimension(300, 45));
        
        // Style the confirmation message
        jLabel5.setFont(new Font("Segoe UI", Font.ITALIC, 14));
        jLabel5.setForeground(new Color(44, 44, 84));
        
        // Add hover effect to the delete button
        jButton1.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseEntered(MouseEvent e) {
                jButton1.setBackground(new Color(255, 69, 69));
            }
            
            @Override
            public void mouseExited(MouseEvent e) {
                jButton1.setBackground(new Color(255, 99, 99));
            }
        });
        
        // Add placeholder text to username field
        jTextField1.setText("Enter username");
        jTextField1.setForeground(Color.GRAY);
        
        jTextField1.addFocusListener(new FocusAdapter() {
            @Override
            public void focusGained(FocusEvent e) {
                if (jTextField1.getText().equals("Enter username")) {
                    jTextField1.setText("");
                    jTextField1.setForeground(Color.BLACK);
                }
            }
            
            @Override
            public void focusLost(FocusEvent e) {
                if (jTextField1.getText().isEmpty()) {
                    jTextField1.setText("Enter username");
                    jTextField1.setForeground(Color.GRAY);
                }
            }
        });
    }

    private JPanel createVerifyPanel() {
        JPanel panel = new JPanel(new BorderLayout(15, 15));
        panel.setBackground(new Color(255, 228, 236));
        panel.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
        
        // Title
        JLabel titleLabel = new JLabel("Verify User Profiles", SwingConstants.CENTER);
        titleLabel.setFont(new Font("Segoe UI", Font.BOLD, 28));
        titleLabel.setForeground(new Color(44, 44, 84));
        panel.add(titleLabel, BorderLayout.NORTH);

        // Create table model with columns
        String[] columns = {"User ID", "Username", "Email", "Status", "Actions"};
        verifyTableModel = new DefaultTableModel(columns, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return column == 4;
            }
        };
        
        // Create table
        verifyTable = new JTable(verifyTableModel);
        verifyTable.setRowHeight(40);
        verifyTable.setFont(new Font("Segoe UI", Font.PLAIN, 14));
        verifyTable.getTableHeader().setFont(new Font("Segoe UI", Font.BOLD, 14));
        verifyTable.getTableHeader().setBackground(new Color(255, 198, 209));
        verifyTable.getTableHeader().setForeground(new Color(44, 44, 84));
        verifyTable.setGridColor(new Color(255, 182, 193));
        verifyTable.setShowGrid(true);
        verifyTable.setBackground(Color.WHITE);
        
        // Create button column
        TableColumn actionColumn = verifyTable.getColumnModel().getColumn(4);
        actionColumn.setCellRenderer(new ButtonRenderer("Delete"));
        actionColumn.setCellEditor(new ButtonEditor(new JCheckBox(), "verify"));

        // Add table to scroll pane
        JScrollPane scrollPane = new JScrollPane(verifyTable);
        scrollPane.setBorder(BorderFactory.createEmptyBorder());
        scrollPane.getViewport().setBackground(Color.WHITE);
        panel.add(scrollPane, BorderLayout.CENTER);
        
        return panel;
    }

    private JPanel createRespondPanel() {
        JPanel panel = new JPanel(new BorderLayout(15, 15));
        panel.setBackground(new Color(255, 228, 236));
        panel.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
        
        // Header Panel with Title and Refresh Button
        JPanel headerPanel = new JPanel(new BorderLayout(15, 15));
        headerPanel.setBackground(new Color(255, 228, 236));
        
        // Title
        JLabel titleLabel = new JLabel("Reported Users", SwingConstants.CENTER);
        titleLabel.setFont(new Font("Segoe UI", Font.BOLD, 28));
        titleLabel.setForeground(new Color(44, 44, 84));
        headerPanel.add(titleLabel, BorderLayout.CENTER);
        
        // Refresh Button
        JButton refreshButton = new JButton("Refresh");
        refreshButton.setFont(new Font("Segoe UI", Font.BOLD, 14));
        refreshButton.setBackground(Color.WHITE);
        refreshButton.setForeground(new Color(44, 44, 84));
        refreshButton.setBorder(BorderFactory.createCompoundBorder(
            BorderFactory.createLineBorder(new Color(255, 105, 180), 2, true),
            BorderFactory.createEmptyBorder(8, 15, 8, 15)
        ));
        refreshButton.setCursor(new Cursor(Cursor.HAND_CURSOR));
        refreshButton.addActionListener(e -> refreshReportedUsers());
        
        JPanel refreshPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT));
        refreshPanel.setBackground(new Color(255, 228, 236));
        refreshPanel.add(refreshButton);
        headerPanel.add(refreshPanel, BorderLayout.EAST);
        
        panel.add(headerPanel, BorderLayout.NORTH);

        // Create table model with columns
        String[] columns = {"Username", "Reported By", "Report Date", "Reason", ""};
        reportedTableModel = new DefaultTableModel(columns, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return column == 4;
            }
            @Override
            public Class<?> getColumnClass(int column) {
                return column == 4 ? JButton.class : String.class;
            }
        };
        
        // Create table
        reportedTable = new JTable(reportedTableModel);
        reportedTable.setRowHeight(45);
        reportedTable.setFont(new Font("Segoe UI", Font.PLAIN, 14));
        reportedTable.getTableHeader().setFont(new Font("Segoe UI", Font.BOLD, 14));
        reportedTable.getTableHeader().setBackground(new Color(255, 198, 209));
        reportedTable.getTableHeader().setForeground(new Color(44, 44, 84));
        reportedTable.setGridColor(new Color(255, 182, 193));
        reportedTable.setShowGrid(true);
        reportedTable.setBackground(Color.WHITE);
        
        // Set column widths
        reportedTable.getColumnModel().getColumn(0).setPreferredWidth(150);
        reportedTable.getColumnModel().getColumn(1).setPreferredWidth(150);
        reportedTable.getColumnModel().getColumn(2).setPreferredWidth(150);
        reportedTable.getColumnModel().getColumn(3).setPreferredWidth(200);
        reportedTable.getColumnModel().getColumn(4).setPreferredWidth(100);
        
        // Create button column
        TableColumn deleteColumn = reportedTable.getColumnModel().getColumn(4);
        deleteColumn.setCellRenderer(new DeleteButtonRenderer());
        deleteColumn.setCellEditor(new DeleteButtonEditor(new JCheckBox()));

        // Add table to scroll pane
        JScrollPane scrollPane = new JScrollPane(reportedTable);
        scrollPane.setBorder(BorderFactory.createEmptyBorder());
        scrollPane.getViewport().setBackground(Color.WHITE);
        panel.add(scrollPane, BorderLayout.CENTER);
        
        return panel;
    }

    private void setActiveLabel(JLabel label) {
        if (activeLabel != null) {
            activeLabel.setForeground(INACTIVE_COLOR);
            activeLabel.setBorder(null);
        }
        activeLabel = label;
        activeLabel.setForeground(ACTIVE_COLOR);
        activeLabel.setBorder(BorderFactory.createMatteBorder(0, 0, 2, 0, ACTIVE_COLOR));
    }

    private class NavigationClickListener extends MouseAdapter {
        private final String cardName;
        private final JLabel label;
        
        public NavigationClickListener(String cardName, JLabel label) {
            this.cardName = cardName;
            this.label = label;
        }
        
        @Override
        public void mouseClicked(MouseEvent e) {
            cardLayout.show(cardPanel, cardName);
            setActiveLabel(label);
        }
    }

    // Custom button renderer
    class ButtonRenderer extends JButton implements TableCellRenderer {
        public ButtonRenderer(String text) {
            setOpaque(true);
            setText(text);
            setBackground(new Color(255, 99, 99));  // Light red color for delete button
            setForeground(Color.WHITE);
            setFont(new Font("Segoe UI", Font.BOLD, 14));
            setBorderPainted(false);
            setFocusPainted(false);
        }

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value,
                boolean isSelected, boolean hasFocus, int row, int column) {
            return this;
        }
    }

    // Custom button editor
    class ButtonEditor extends DefaultCellEditor {
        protected JButton button;
        private String tableType;
        private Object clickedValue;
        private boolean clicked;

        public ButtonEditor(JCheckBox checkBox, String tableType) {
            super(checkBox);
            this.tableType = tableType;
            button = new JButton();
            button.setOpaque(true);
            button.setBackground(new Color(255, 105, 180));
            button.setForeground(Color.WHITE);
            button.setFocusPainted(false);
            
            button.addActionListener(e -> fireEditingStopped());
        }

        @Override
        public Component getTableCellEditorComponent(JTable table, Object value,
                boolean isSelected, int row, int column) {
            clicked = true;
            button.setText("Delete");
            return button;
        }

        @Override
        public Object getCellEditorValue() {
            if (clicked) {
                // Handle delete action based on table type
                if (tableType.equals("verify")) {
                    int row = verifyTable.getSelectedRow();
                    if (row != -1) {
                        handleVerifyDelete(row);
                    }
                } else if (tableType.equals("reported")) {
                    int row = reportedTable.getSelectedRow();
                    if (row != -1) {
                        handleReportedDelete(row);
                    }
                }
            }
            clicked = false;
            return "Delete";
        }

        private void handleVerifyDelete(int row) {
            String userId = verifyTableModel.getValueAt(row, 0).toString();
            int choice = JOptionPane.showConfirmDialog(
                null,
                "Are you sure you want to delete user ID: " + userId + "?",
                "Confirm Delete",
                JOptionPane.YES_NO_OPTION
            );
            
            if (choice == JOptionPane.YES_OPTION) {
                verifyTableModel.removeRow(row);
                // Add your delete logic here
            }
        }

        private void handleReportedDelete(int row) {
            String reportId = reportedTableModel.getValueAt(row, 0).toString();
            int choice = JOptionPane.showConfirmDialog(
                null,
                "Are you sure you want to delete report ID: " + reportId + "?",
                "Confirm Delete",
                JOptionPane.YES_NO_OPTION
            );
            
            if (choice == JOptionPane.YES_OPTION) {
                reportedTableModel.removeRow(row);
                // Add your delete logic here
            }
        }

        @Override
        public boolean stopCellEditing() {
            clicked = false;
            return super.stopCellEditing();
        }
    }

    private void refreshReportedUsers() {
        // Clear existing data
        reportedTableModel.setRowCount(0);
        
        // Add sample data (replace with actual data fetch logic)
        reportedTableModel.addRow(new Object[]{"user123", "alice", "04/09/2024", "Spam", "Delete"});
        reportedTableModel.addRow(new Object[]{"john_doe", "bob", "04/09/2024", "Harassment", "Delete"});
        reportedTableModel.addRow(new Object[]{"test456", "charlie", "04/07/2024", "Inappropriate content", "Delete"});
        reportedTableModel.addRow(new Object[]{"janedoe", "david", "04/06/2024", "Spam", "Delete"});
    }

    // Custom Delete Button Renderer
    class DeleteButtonRenderer extends JButton implements TableCellRenderer {
        public DeleteButtonRenderer() {
            setOpaque(true);
            setText("Delete");
            setBackground(new Color(255, 99, 99));  // Light red color for delete button
            setForeground(Color.WHITE);
            setFont(new Font("Segoe UI", Font.BOLD, 14));
            setBorderPainted(false);
            setFocusPainted(false);
            setCursor(new Cursor(Cursor.HAND_CURSOR));
            setBorder(BorderFactory.createEmptyBorder(5, 10, 5, 10)); // Add padding
        }

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value,
                boolean isSelected, boolean hasFocus, int row, int column) {
            setText("Delete");  // Ensure text is always set
            return this;
        }
    }

    // Custom Delete Button Editor
    class DeleteButtonEditor extends DefaultCellEditor {
        protected JButton button;
        private String username;
        private boolean clicked;

        public DeleteButtonEditor(JCheckBox checkBox) {
            super(checkBox);
            button = new JButton("Delete");  // Set text in constructor
            button.setOpaque(true);
            button.setBackground(new Color(255, 99, 99));
            button.setForeground(Color.WHITE);
            button.setFont(new Font("Segoe UI", Font.BOLD, 14));
            button.setBorderPainted(false);
            button.setFocusPainted(false);
            button.setCursor(new Cursor(Cursor.HAND_CURSOR));
            button.setBorder(BorderFactory.createEmptyBorder(5, 10, 5, 10)); // Add padding
            
            button.addActionListener(e -> fireEditingStopped());
        }

        @Override
        public Component getTableCellEditorComponent(JTable table, Object value,
                boolean isSelected, int row, int column) {
            username = (String) table.getValueAt(row, 0);
            clicked = true;
            button.setText("Delete");  // Ensure text is set when editing
            return button;
        }

        @Override
        public Object getCellEditorValue() {
            if (clicked) {
                int choice = JOptionPane.showConfirmDialog(
                    button,
                    "Are you sure you want to delete user: " + username + "?",
                    "Confirm Delete",
                    JOptionPane.YES_NO_OPTION,
                    JOptionPane.WARNING_MESSAGE
                );
                
                if (choice == JOptionPane.YES_OPTION) {
                    // Here you would add the actual delete logic
                    // For now, we'll just remove the row from the table
                    for (int i = 0; i < reportedTableModel.getRowCount(); i++) {
                        if (reportedTableModel.getValueAt(i, 0).equals(username)) {
                            reportedTableModel.removeRow(i);
                            break;
                        }
                    }
                }
            }
            clicked = false;
            return "";
        }

        @Override
        public boolean stopCellEditing() {
            clicked = false;
            return super.stopCellEditing();
        }
    }
}
